        stepSlidePrevious() {
            this.setSlide(-1);
        },
        stepSlideNext() {
            this.setSlide(1);
        },
        setSlide(direction: number) {
            //On récupére le container des slides
            const slides = (this.$refs.slides as HTMLDivElement);

            //On récupére le prochain index
            let nextIndex = this.slideIndex + direction;
            if(nextIndex < 0) nextIndex = (slides.children.length - 1);
            if(nextIndex >= slides.children.length) nextIndex = 0;
            if(this.slideIndex == nextIndex) return;

            //On récupére le nom de l'animation
            const animationName = (direction == 1) ? 'slideNext' : 'slidePrevious';

            const element = (slides.children[this.slideIndex] as HTMLElement);
            const className = direction == -1 ? 'slideLeft' : 'slideRight';
            console.log(className);

            //element.classList.add('animate');
            //element.style.left = `${slides.offsetWidth * direction}px`;

            const nextElement = (slides.children[nextIndex] as HTMLElement);

            //Remove
            element.classList.remove(className);
            nextElement.classList.remove('slideMiddle');

            void element.offsetWidth;
            element.classList.add(className);
            nextElement.classList.add('slideMiddle');
            setTimeout(() => {
                element.classList.remove(className);
                nextElement.classList.remove('slideMiddle');
            }, 1000);
            /*
            const pos = slides.offsetWidth * (direction * -1);
            console.log(pos);
            nextElement.style.left = `${pos}px`;
            nextElement.classList.add('animate');
            nextElement.style.left = '0px';
            */

            //On enregistre l'index
            this.slideIndex = nextIndex;


            // :class="{ 'active': index == slideIndex }"
        },







                    > .slide.slideLeft {
                left: -100%;
                transition: left 1s ease-in-out;
                //animation: slideLeft 1s ease-in-out;
                //@include transition(left 1s ease-in-out);
            }

            > .slide.slideMiddle {
                left: 0;
                transition: left 1s ease-in-out;
            }

            > .slide.slideRight {
                left: 100%;
                transition: left 1s ease-in-out;
            }